#ArrayType <- kann 450k, EPIC oder overlap sein
# threshhold <- default 0.2
options(rstudio.help.showDataPreview = FALSE)
options(scipen = 999)
#for Mac
target_files <- read.csv("/Volumes/PhD/Ependymoma/Ependymoma_methylation_mainCohort/sample_info_02_08_2022_850_Mac.csv", header=TRUE, sep=";")
#
g_files <- paste0(target_files$Basename, "_Grn.idat")
r_files <- paste0(target_files$Basename,"_Red.idat" )
# test if every file is an idat file
test_grn <- sapply(g_files, readChar, nchars = 4)
test_red <- sapply(r_files, readChar, nchars = 4)
#This will give out file names if they are not IDAT and character 0 if all files are IDAT
test_grn[test_grn != "IDAT"]
test_red[test_red != "IDAT"]
#remove duplicates
while (anyDuplicated(target_files$Basename) != "0") {
target_files <- target_files[-anyDuplicated(target_files$Basename),]
}
target_files <- target_files[which(target_files$Classifier_new_version_condensed == "EPN_SPINE_MYCN"),]
#detail_regions <- read.csv("D:/Ependymoma/Ependymoma_methylation_mainCohort/detail_conumee.csv")
details <- read.csv("/Volumes/PhD/Ependymoma/Ependymoma_methylation_mainCohort/detail_conumee.csv")
View(details)
genes <- details$name
genes <- as.data.frame(details$name)
View(genes)
genes <- details$name
detail_region <- genes
genes <- as.data.frame(detail_region)
View(genes)
devtools::load_all()
cum.CNV(target_files, segmentationMode = "single", detail.regions = detail_region)
cum.CNV(target_files, segmentationMode = "multi", detail.regions = detail_region)
cum.CNV(target_files, segmentationMode = "multi", detail.regions = detail_region)
devtools::load_all()
cum.CNV(target_files, segmentationMode = "multi", detail.regions = detail_region)
cum.CNV(target_files, segmentationMode = "multi", detail.regions = detail_region, conumee.version = 2)
devtools::load_all()
cum.CNV(target_files, segmentationMode = "multi", detail.regions = detail_region, conumee.version = 2)
devtools::load_all()
cum.CNV(target_files, segmentationMode = "multi", detail.regions = detail_region, conumee.version = 2)
?tidyverse::left_join
devtools::load_all()
cum.CNV(target_files, segmentationMode = "multi", detail.regions = detail_region, conumee.version = 2)
BiocManager::install("tidyverse")
?tidyverse::left_join
devtools::load_all()
#for Mac
target_files <- read.csv("/Volumes/PhD/Ependymoma/Ependymoma_methylation_mainCohort/sample_info_02_08_2022_850_Mac.csv", header=TRUE, sep=";")
#
g_files <- paste0(target_files$Basename, "_Grn.idat")
r_files <- paste0(target_files$Basename,"_Red.idat" )
# test if every file is an idat file
test_grn <- sapply(g_files, readChar, nchars = 4)
test_red <- sapply(r_files, readChar, nchars = 4)
#This will give out file names if they are not IDAT and character 0 if all files are IDAT
test_grn[test_grn != "IDAT"]
test_red[test_red != "IDAT"]
#remove duplicates
while (anyDuplicated(target_files$Basename) != "0") {
target_files <- target_files[-anyDuplicated(target_files$Basename),]
}
target_files <- target_files[which(target_files$Classifier_new_version_condensed == "EPN_SPINE_MYCN"),]
details <- read.csv("/Volumes/PhD/Ependymoma/Ependymoma_methylation_mainCohort/detail_conumee.csv")
detail_regions <- details$name
cum.CNV(target_files, segmentationMode = "multi", conumee.version = 2, detail.regions = detail_regions)
?dplyr::left_join
devtools::load_all()
cum.CNV(target_files, segmentationMode = "multi", conumee.version = 2, detail.regions = detail_regions)
?dplyr::join_by
devtools::load_all()
cum.CNV(target_files, segmentationMode = "multi", conumee.version = 2, detail.regions = detail_regions)
rgset_EPIC <-
minfi::read.metharray.exp(targets = dataFiles, force = TRUE)
dataFiles <- target_files
rgset_EPIC <-
minfi::read.metharray.exp(targets = dataFiles, force = TRUE)
target_rgset <- rgset_EPIC
anno_targets <- conumee2.0::CNV.create_anno(array_type = ArrayType)
ArrayType = EPIC
ArrayType <- EPIC
ArrayType <- "EPIC"
anno_targets <- conumee2.0::CNV.create_anno(array_type = ArrayType)
# Illumina normalisation
target_mset <- minfi::preprocessIllumina(target_rgset)
#target_mset_mapped <- minfi::mapToGenome(target_mset)
#names_target_mset <- target_mset
target_mset_loaded <- conumee::CNV.load(target_mset)
#load controls based on ArrayType
if (ArrayType == "overlap" || ArrayType == "450k") {
control_mset <- minfiData::MsetEx
}
if (ArrayType == "EPIC") {
control_mset <- minfiDataEPIC::MsetEPIC
}
control_mset_loaded <- conumee::CNV.load(control_mset)
# find overlapping probes between arraydata and annotations
#anno_targets@probes <-
#    IRanges::subsetByOverlaps(anno_targets@probes, granges(target_mset_mapped))
output <-
list(
"target_mset_loaded" = target_mset_loaded,
"control_mset_loaded" = control_mset_loaded,
"anno_targets" = anno_targets
)
mSetsAnno <- output
#load and bin each sample in conumee
x <- conumee2.0::CNV.bin(conumee2.0::CNV.fit(query = mSetsAnno$target_mset_loaded, ref = mSetsAnno$control_mset_loaded, mSetsAnno$anno_targets))
target_ratios <- cbind(x@anno@bins@ranges@NAMES, x@anno@bins@ranges@start, as.data.frame(x@bin$ratio))
names(target_ratios) <- c("Chrom", "Median.bp", names(mSetsAnno$target_mset_loaded@intensity))
target_ratios$Chrom <- gsub("chr","",target_ratios$Chrom)
target_ratios$Chrom <- substr(target_ratios$Chrom,1,nchar(target_ratios$Chrom)-4)
target_ratios$Chrom <- sub("\\-", "", target_ratios$Chrom)
target_ratios <- na.omit(as.data.frame(sapply(target_ratios, as.numeric)))
#################### Segmentation #################################
seg_mpcf <- updatempcf(target_ratios, gamma = 5)
bin_data_samples <- target_ratios[,-(which(names(target_ratios) %in% c("Chrom", "Median.bp")))]
bin_data_all <- as.data.frame(cbind(as.numeric(mSetsAnno$anno_targets@bins@ranges@start), as.numeric(rowMeans(bin_data_samples)), target_ratios$Chrom))
colnames(bin_data_all)<- c("bin_start", "bin_value", "names")
#genome data
chr_name <- mSetsAnno$anno_targets@genome$chr
chr_size <- mSetsAnno$anno_targets@genome$size
genome_chr <- cumsum(as.numeric(chr_size))
chr_centr <- mSetsAnno$anno_targets@genome$pq
#just for getting pq - lines
addChr <- c(0,genome_chr)
addChr <- addChr[-length(addChr)]
genome_centr <- chr_centr + addChr
#calculate position on genome
start = c()
foreach(i=1:length(bin_data_all$bin_start)) %do%
{
start[i] <- bin_data_all$bin_start[i] + addChr[bin_data_all$names[i]]
}
# bin data consisting out of the starting point of the bin and the value
final_bin_data <- as.data.frame(cbind(as.numeric(start), bin_data_all$bin_value))
final_bin_data$bin_nr <- rownames(final_bin_data)
#segment data
seg_data_samples <- seg_mpcf[,-(which(names(seg_mpcf) %in% c("chrom", "arm", "start.pos", "end.pos", "n.probes")))]
#mean seg value
segSta <- as.data.frame(cbind(seg_mpcf$start.pos, rowMeans(seg_data_samples), as.numeric(seg_mpcf$chrom)))
segEnd <- as.data.frame(cbind(seg_mpcf$end.pos, rowMeans(seg_data_samples), as.numeric(seg_mpcf$chrom)))
names(segEnd) <- names(segSta)
segment_data <- as.data.frame(rbind(segSta, segEnd))
colnames(segment_data) <- c("seg_lim", "seg_val", "chr")
#calculate position on genome
seg_start = c()
foreach(i=1:length(segment_data$chr)) %do%
{
seg_start[i] <- segment_data$seg_lim[i] + addChr[segment_data$chr[i]]
}
final_seg_data <- as.data.frame(cbind(as.numeric(seg_start), as.numeric(segment_data$seg_val)))
final_seg_data <-final_seg_data[order(final_seg_data$V1),]
#x-axis
axis_break <- genome_centr
axis_label <- c(1:22)
b <- c(-1, -0.5, 0, 0.5, 1)
#detail data -> here used to be anno _EPIC
gene_regions <- as.data.frame(cbind(mSetsAnno$anno_targets@listData$UCSC_RefGene_Name, mSetsAnno$anno_targets@rownames, mSetsAnno$anno_targets@listData$chr, mSetsAnno$anno_targets@listData$pos))
anno <- getAnnotation(IlluminaHumanMethylationEPICanno.ilm10b4.hg19)
#detail data -> here used to be anno _EPIC
gene_regions <- as.data.frame(cbind(anno@listData$UCSC_RefGene_Name, anno@rownames, anno@listData$chr, anno@listData$pos))
#detail data -> here used to be anno _EPIC
gene_regions <- as.data.frame(cbind(anno@listData$UCSC_RefGene_Name, anno@rownames, anno@listData$chr, anno@listData$pos))
#detail data -> here used to be anno _EPIC
gene_regions <- as.data.frame(cbind(anno@listData$UCSC_RefGene_Name, anno@rownames, anno@listData$chr, anno@listData$pos))
colnames(gene_regions) <- c("genes", "CpG_sites", "chr", "pos")
gene_regions$genes <- gsub(";"," ",gene_regions$genes)
gene_regions$chr <- gsub("chr", "", gene_regions$chr)
df_gene_regions <- gene_regions[!(gene_regions$chr=="X" | gene_regions$chr=="Y"),]
df_gene_regions$chr <- as.numeric(df_gene_regions$chr)
df_gene_regions$pos <- as.numeric(df_gene_regions$pos)
cpg_pos = c()
counter3 <- 1:length(df_gene_regions$chr)
for(i in counter3){
cpg_pos[i] <- df_gene_regions$pos[i] + addChr[df_gene_regions$chr[i]]
}
df_gene_regions$pos <- as.numeric(cpg_pos)
genes <- as.data.frame(detail.regions)
detail.regions <- detail_regions
genes <- as.data.frame(detail.regions)
final_bin_data <-  na.omit(final_bin_data)
df_gene_regions$bin <- final_bin_data$bin_nr[findInterval(df_gene_regions$pos, final_bin_data$V1)]
df_gene_regions <- as.data.frame(na.omit(as.matrix(df_gene_regions)))
df_gene_regions <- tidyr::separate(df_gene_regions, genes, into = c("genes1", "genes2"), sep = " (?=[^ ]+$)")
View(genes)
#put together the genes and the corresponding bin data
geneBins <- dplyr::left_join(genes, df_gene_regions, by = dplyr::join_by("genes$detail.regions" == "genes1"))
#put together the genes and the corresponding bin data
geneBins <- dplyr::left_join(genes, df_gene_regions, by = dplyr::join_by("detail.regions" == "genes1"))
#remove duplicates and only keep the bin with the highest number of CpG sites present
geneBins <- geneBins %>% dplyr::group_by(geneBins$`genes$detail.regions`) %>% dplyr::count(geneBins$`genes$detail.regions`, geneBins$bin)
#remove duplicates and only keep the bin with the highest number of CpG sites present
geneBins <- dplyr::group_by(geneBins$`genes$detail.regions`)
View(geneBins)
#remove duplicates and only keep the bin with the highest number of CpG sites present
geneBins <- dplyr::group_by(geneBins$detail.regions)
?group_by
#put together the genes and the corresponding bin data
geneBins <- as.data.frame(dplyr::left_join(genes, df_gene_regions, by = dplyr::join_by("detail.regions" == "genes1")))
#remove duplicates and only keep the bin with the highest number of CpG sites present
geneBins <- dplyr::group_by(geneBins$detail.regions)
#remove duplicates and only keep the bin with the highest number of CpG sites present
geneBins <- dplyr::group_by(detail.regions)
?dplyr::count
geneBins2 <- dplyr::count(geneBins$detail.regions, geneBins$bin)
#remove duplicates and only keep the bin with the highest number of CpG sites present
geneBins2 <- dplyr::group_by(bins)
#remove duplicates and only keep the bin with the highest number of CpG sites present
geneBins2 <- dplyr::group_by(geneBins$bins)
#remove duplicates and only keep the bin with the highest number of CpG sites present
geneBins2 <- geneBins margrittr::%>% dplyr::group_by(geneBins$bins)
#remove duplicates and only keep the bin with the highest number of CpG sites present
geneBins %>% dplyr::group_by(geneBins$bins) %>% dplyr::count(geneBins$detail.regions, geneBins$bin)
require(dplyr)
#remove duplicates and only keep the bin with the highest number of CpG sites present
geneBins %>% dplyr::group_by(geneBins$bins) %>% dplyr::count(geneBins$detail.regions, geneBins$bin)
#remove duplicates and only keep the bin with the highest number of CpG sites present
geneBins <- geneBins %>% dplyr::group_by(geneBins$bins) %>% dplyr::count(geneBins$detail.regions, geneBins$bin)
View(geneBins)
colnames(geneBins) <- c("genes", "bins", "n")
geneBins <- geneBins[order(geneBins$n, decreasing  = TRUE),]
geneBins <- na.omit(geneBins[-which(duplicated(geneBins$genes)),])
geneBins <- dplyr::left_join(geneBins, final_bin_data, by= dplyr::join_by("bins" == "bin_nr"))
geneBins <- geneBins[!((abs(geneBins$V2)) <0.15),]
cumCNV <- ggplot() +
geom_point(final_bin_data, mapping = aes(x=V1, y=V2, colour=V2))+
ylim(-2, 2) +
scale_color_gradient2(low = colour.loss ,  mid = "white",  high = colour.amplification,  midpoint = 0, breaks = b, guide = "colourbar" , space = "Lab", name = "Intensity") +
geom_vline(xintercept = genome_chr, colour = "grey") +
geom_vline(xintercept = genome_centr,linetype="dotted", colour = "grey")  +
geom_path(data = final_seg_data, aes(x = V1, y = V2)) +
labs( y = "Intensity") +
geom_point(data = geneBins, aes(x = geneBins$V1, y = geneBins$V2)) +
geom_label_repel(data = geneBins, aes(x = geneBins$V1, y = geneBins$V2), label = geneBins$genes, label.size = 0.2, nudge_x = 0.1, nudge_y = 0.1,) +
scale_x_continuous(limits = c(10001, 2881033286), name = "Chromosome", breaks = axis_break, labels = axis_label ) +
theme_classic(base_size = 15) +
coord_cartesian(xlim = c(50001, 2881033286), expand = FALSE) +
guides(x = guide_axis(n.dodge = 2))
rm(list=ls())
gc()
target_files <- read.csv("/Volumes/PhD/Ependymoma/Ependymoma_methylation_mainCohort/sample_info_02_08_2022_850_Mac.csv", header=TRUE, sep=";")
#
g_files <- paste0(target_files$Basename, "_Grn.idat")
r_files <- paste0(target_files$Basename,"_Red.idat" )
# test if every file is an idat file
test_grn <- sapply(g_files, readChar, nchars = 4)
test_red <- sapply(r_files, readChar, nchars = 4)
#This will give out file names if they are not IDAT and character 0 if all files are IDAT
test_grn[test_grn != "IDAT"]
test_red[test_red != "IDAT"]
#remove duplicates
while (anyDuplicated(target_files$Basename) != "0") {
target_files <- target_files[-anyDuplicated(target_files$Basename),]
}
target_files <- target_files[which(target_files$Classifier_new_version_condensed == "EPN_SPINE_MYCN"),]
details <- read.csv("/Volumes/PhD/Ependymoma/Ependymoma_methylation_mainCohort/detail_conumee.csv")
View(details)
detail_regions <- details$name
devtools::load_all()
cum.CNV(target_files, segmentationMode = "multi", conumee.version = 2, detail.regions = detail_regions)
devtools::load_all()
cum.CNV(target_files, segmentationMode = "multi", conumee.version = 2, detail.regions = detail_regions)
devtools::load_all()
cum.CNV(target_files, segmentationMode = "multi", conumee.version = 2, detail.regions = detail_regions)
devtools::load_all()
cum.CNV(target_files, segmentationMode = "multi", detail.regions = detail_regions)
devtools::load_all()
cum.CNV(target_files, segmentationMode = "multi", detail.regions = detail_regions)
devtools::load_all()
cum.CNV(target_files, segmentationMode = "multi", detail.regions = detail_regions)
cum.CNV(target_files, segmentationMode = "multi", detail.regions = detail_regions, conumee.version = 1)
devtools::load_all()
cum.CNV(target_files, segmentationMode = "multi", detail.regions = detail_regions, conumee.version = 1)
rgset_EPIC <- read.metharray.exp(targets = target_files, force = TRUE)
target_rgset <- rgset_EPIC
anno_targets <- CNV.create_anno(bin_minprobes = 15, bin_minsize = 50000, bin_maxsize = 5000000, array_type = ArrayType)
anno_targets <- CNV.create_anno(bin_minprobes = 15, bin_minsize = 50000, bin_maxsize = 5000000, array_type = "EPIC")
# Illumina normalisation
target_mset <- preprocessIllumina(target_rgset)
target_mset_mapped <- mapToGenome(target_mset)
target_mset_loaded <- CNV.load(target_mset)
#load controls based on ArrayType
if (ArrayType == "overlap" || ArrayType == "450k"){
control_mset <- minifData::MsetEx
}
control_mset <- minfiDataEPIC::MsetEPIC
control_mset_loaded <- CNV.load(control_mset)
# find overlapping probes between arraydata and annotations
anno_targets@probes <- subsetByOverlaps(anno_targets@probes, granges(target_mset_mapped))
output <- list("target_mset_loaded" = target_mset_loaded, "control_mset_loaded" = control_mset_loaded, "anno_targets" = anno_targets)
mSetsAnno <- output
View(mSetsAnno)
names(mSetsAnno$target_mset_loaded@intensity)
names(mSetsAnno$target_mset_loaded@intensity[1])
ncol(mSetsAnno$target_mset_loaded@intensity)
foreach(i=1:ncol(mSetsAnno$target_mset_loaded@intensity) %do%
{
if (i == 1) {
x <- conumee::CNV.bin(conumee::CNV.fit(query = mSetsAnno$target_mset_loaded[names(mSetsAnno$target_mset_loaded@intensity[i])], ref = mSetsAnno$control_mset_loaded, mSetsAnno$anno_targets))
target_ratios <- cbind(x@anno@bins@ranges@NAMES, x@anno@bins@ranges@start, x@bin$ratio)
}
else {
x <- conumee::CNV.bin(conumee::CNV.fit(query = mSetsAnno$target_mset_loaded[names(mSetsAnno$target_mset_loaded@intensity[i])], ref = mSetsAnno$control_mset_loaded, mSetsAnno$anno_targets))
target_ratios <- as.data.frame(cbind(target_ratios, x@bin$ratio))
}
}
.
mSetsAnno$target_mset_loaded@intensity[i,]
mSetsAnno$target_mset_loaded@intensity[1,]
mSetsAnno$target_mset_loaded@intensity[,1]
foreach(i=1:ncol(mSetsAnno$target_mset_loaded@intensity) %do%
{
if (i == 1) {
x <- conumee::CNV.bin(conumee::CNV.fit(query = mSetsAnno$target_mset_loaded@intensity[,i], ref = mSetsAnno$control_mset_loaded, mSetsAnno$anno_targets))
target_ratios <- cbind(x@anno@bins@ranges@NAMES, x@anno@bins@ranges@start, x@bin$ratio)
}
else {
x <- conumee::CNV.bin(conumee::CNV.fit(query = mSetsAnno$target_mset_loaded@intensity[,i], ref = mSetsAnno$control_mset_loaded, mSetsAnno$anno_targets))
target_ratios <- as.data.frame(cbind(target_ratios, x@bin$ratio))
}
}
names(target_ratios) <- c("Chrom", "Median.bp", names(mSetsAnno$target_mset_loaded@intensity))
foreach(i=1:ncol(mSetsAnno$target_mset_loaded@intensity) %do%
{
if (i == 1) {
x <- conumee::CNV.bin(conumee::CNV.fit(query = mSetsAnno$target_mset_loaded@intensity[,i], ref = mSetsAnno$control_mset_loaded, mSetsAnno$anno_targets))
target_ratios <- cbind(x@anno@bins@ranges@NAMES, x@anno@bins@ranges@start, x@bin$ratio)
}
else {
x <- conumee::CNV.bin(conumee::CNV.fit(query = mSetsAnno$target_mset_loaded@intensity[,i], ref = mSetsAnno$control_mset_loaded, mSetsAnno$anno_targets))
target_ratios <- as.data.frame(cbind(target_ratios, x@bin$ratio))
}
}
.
foreach(i=1:ncol(mSetsAnno$target_mset_loaded@intensity)) %do%
{
if (i == 1) {
x <- conumee::CNV.bin(conumee::CNV.fit(query = mSetsAnno$target_mset_loaded@intensity[,i], ref = mSetsAnno$control_mset_loaded, mSetsAnno$anno_targets))
target_ratios <- cbind(x@anno@bins@ranges@NAMES, x@anno@bins@ranges@start, x@bin$ratio)
}
else {
x <- conumee::CNV.bin(conumee::CNV.fit(query = mSetsAnno$target_mset_loaded@intensity[,i], ref = mSetsAnno$control_mset_loaded, mSetsAnno$anno_targets))
target_ratios <- as.data.frame(cbind(target_ratios, x@bin$ratio))
}
}
foreach(i=1:ncol(mSetsAnno$target_mset_loaded@intensity)) %do%
{
if (i == 1) {
x <- conumee::CNV.bin(conumee::CNV.fit(query = mSetsAnno$target_mset_loaded@intensity[names(mSetsAnno$target_mset_loaded@intensity[i])], ref = mSetsAnno$control_mset_loaded, mSetsAnno$anno_targets))
target_ratios <- cbind(x@anno@bins@ranges@NAMES, x@anno@bins@ranges@start, x@bin$ratio)
}
else {
x <- conumee::CNV.bin(conumee::CNV.fit(query = mSetsAnno$target_mset_loaded@intensity[names(mSetsAnno$target_mset_loaded@intensity[i])], ref = mSetsAnno$control_mset_loaded, mSetsAnno$anno_targets))
target_ratios <- as.data.frame(cbind(target_ratios, x@bin$ratio))
}
}
#load and bin each sample in conumee
foreach(i=1:ncol(mSetsAnno$target_mset_loaded@intensity)) %do%
{
if (i == 1) {
x <- conumee::CNV.bin(conumee::CNV.fit(query = mSetsAnno$target_mset_loaded[names(mSetsAnno$target_mset_loaded@intensity[i])], ref = mSetsAnno$control_mset_loaded, mSetsAnno$anno_targets))
target_ratios <- cbind(x@anno@bins@ranges@NAMES, x@anno@bins@ranges@start, x@bin$ratio)
}
else {
x <- conumee::CNV.bin(conumee::CNV.fit(query = mSetsAnno$target_mset_loaded[names(mSetsAnno$target_mset_loaded@intensity[i])], ref = mSetsAnno$control_mset_loaded, mSetsAnno$anno_targets))
target_ratios <- as.data.frame(cbind(target_ratios, x@bin$ratio))
}
}
detach("package:conumee2.0", unload = TRUE)
foreach(i=1:ncol(mSetsAnno$target_mset_loaded@intensity)) %do%
{
if (i == 1) {
x <- conumee::CNV.bin(conumee::CNV.fit(query = mSetsAnno$target_mset_loaded[names(mSetsAnno$target_mset_loaded@intensity[i])], ref = mSetsAnno$control_mset_loaded, mSetsAnno$anno_targets))
target_ratios <- cbind(x@anno@bins@ranges@NAMES, x@anno@bins@ranges@start, x@bin$ratio)
}
else {
x <- conumee::CNV.bin(conumee::CNV.fit(query = mSetsAnno$target_mset_loaded[names(mSetsAnno$target_mset_loaded@intensity[i])], ref = mSetsAnno$control_mset_loaded, mSetsAnno$anno_targets))
target_ratios <- as.data.frame(cbind(target_ratios, x@bin$ratio))
}
}
names(mSetsAnno$target_mset_loaded@intensity[1])
?CNV.bin
foreach(i=1:ncol(mSetsAnno$target_mset_loaded@intensity)) %do%
{
if (i == 1) {
x <- conumee::CNV.bin(conumee::CNV.fit(query = mSetsAnno$target_mset_loaded[names(mSetsAnno$target_mset_loaded@intensity[i])], ref = mSetsAnno$control_mset_loaded, anno = mSetsAnno$anno_targets))
target_ratios <- cbind(x@anno@bins@ranges@NAMES, x@anno@bins@ranges@start, x@bin$ratio)
}
else {
x <- conumee::CNV.bin(conumee::CNV.fit(query = mSetsAnno$target_mset_loaded[names(mSetsAnno$target_mset_loaded@intensity[i])], ref = mSetsAnno$control_mset_loaded, anno = mSetsAnno$anno_targets))
target_ratios <- as.data.frame(cbind(target_ratios, x@bin$ratio))
}
}
View(mSetsAnno)
conumee::CNV.fit(query = mSetsAnno$target_mset_loaded[names(mSetsAnno$target_mset_loaded@intensity[i])], ref = mSetsAnno$control_mset_loaded, anno = mSetsAnno$anno_targets)
target_mset_loaded <- mSetsAnno$target_mset_loaded
foreach(i=1:ncol(mSetsAnno$target_mset_loaded@intensity)) %do%
{
if (i == 1) {
x <- conumee::CNV.bin(conumee::CNV.fit(query = target_mset_loaded[names(target_mset_loaded@intensity[i])], ref = mSetsAnno$control_mset_loaded, anno = mSetsAnno$anno_targets))
target_ratios <- cbind(x@anno@bins@ranges@NAMES, x@anno@bins@ranges@start, x@bin$ratio)
}
else {
x <- conumee::CNV.bin(conumee::CNV.fit(query = target_mset_loaded[names(target_mset_loaded@intensity[i])], ref = mSetsAnno$control_mset_loaded, anno = mSetsAnno$anno_targets))
target_ratios <- as.data.frame(cbind(target_ratios, x@bin$ratio))
}
}
names(target_mset_loaded@intensity[1])
control_mset_loaded <- mSetsAnno$control_mset_loaded
x <- conumee::CNV.bin(conumee::CNV.fit(query = target_mset_loaded[names(target_mset_loaded@intensity[i])], ref = control_mset_loaded,  mSetsAnno$anno_targets))
detach("package:conumee", unload = TRUE)
x <- conumee::CNV.bin(conumee::CNV.fit(query = target_mset_loaded[names(target_mset_loaded@intensity[i])], ref = control_mset_loaded,  mSetsAnno$anno_targets))
anno_targets <- mSetsAnno$anno_targets
x <- conumee::CNV.bin(conumee::CNV.fit(query = target_mset_loaded[names(target_mset_loaded@intensity[i])], ref = control_mset_loaded,  anno_targets))
devtools::load_all()
knitr::opts_chunk$set(echo = TRUE)
target_files <- read.csv("/Volumes/PhD/Ependymoma/Ependymoma_methylation_mainCohort/sample_info_02_08_2022_850_Mac.csv", header=TRUE, sep=";")
#
g_files <- paste0(target_files$Basename, "_Grn.idat")
r_files <- paste0(target_files$Basename,"_Red.idat" )
# test if every file is an idat file
test_grn <- sapply(g_files, readChar, nchars = 4)
test_red <- sapply(r_files, readChar, nchars = 4)
#This will give out file names if they are not IDAT and character 0 if all files are IDAT
test_grn[test_grn != "IDAT"]
## named character(0)
test_red[test_red != "IDAT"]
## named character(0)
#remove duplicates
while (anyDuplicated(target_files$Basename) != "0") {
target_files <- target_files[-anyDuplicated(target_files$Basename),]
}
details <- read.csv("/Volumes/PhD/Ependymoma/Ependymoma_methylation_mainCohort/detail_conumee.csv")
detail_regions <- details$name
MYCN <- target_files[which(target_files$Classifier_new_version_condensed == "EPN_SPINE_MYCN"),]
cum.CNV(MYCN, segmentationMode = "multi", detail.regions = detail_regions)
devtools::load_all()
seg <- cum.CNV(MYCN, segmentationMode = "multi", detail.regions = detail_regions, output = "all")
View(seg)
seg <- cum.CNV(MYCN, segmentationMode = "all", detail.regions = detail_regions, output = "all")
