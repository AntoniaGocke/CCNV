cumFreq <- function(mSetsAnno, seg_mpcf, target_ratios, colour.amplification, colour.loss, thresh, array_type){
if (array_type == "mouse") {
#Genome Data
chr_name <- mSetsAnno$anno_targets@genome$chr
chr_size <- mSetsAnno$anno_targets@genome$size
genome_chr <- cumsum(as.numeric(chr_size))
#just for getting pq - lines
addChr <- c(0,genome_chr)
addChr <- addChr[-length(addChr)]
#defining threshholds
broad_min_probes <- 300
focal_min_probes <- 2
#x-axis
axis_break <- genome_chr
axis_label <- c(1:length(genome_chr))
b <- c(-1, -0.5, 0, 0.5, 1)
#segment
segstart <- seg_mpcf$start.pos
segend <- seg_mpcf$end.pos
segnames <- as.numeric(seg_mpcf$chrom)
segment_data <- as.data.frame(cbind(segstart, segend, segnames))
colnames(segment_data) <- c("seg_start", "seg_end" , "chr")
#calculate position on genome
seg_start <- c()
seg_end <- c()
foreach(i=1:length(segment_data$chr)) %do%
{
seg_start[i] <- segment_data$seg_start[i] + addChr[segment_data$chr[i]]
seg_end[i] <- segment_data$seg_end[i] + addChr[segment_data$chr[i]]
}
seg_data_samples <- seg_mpcf[,-(which(names(seg_mpcf) %in% c("chrom", "arm", "start.pos", "end.pos", "n.probes")))]
df_seg_val <- as.data.frame(cbind(seg_start, seg_end,  rowMeans(seg_data_samples)))
df_abberation_candidates <- as.data.frame(cbind(seg_start, seg_end, seg_mpcf$n.probes, seg_data_samples))
#focal candidates
focal_candidates <- df_abberation_candidates
#focal_candidates$seg_end <- focal_candidates$seg_end + 10000000
for (i in 1:length(focal_candidates$seg_end)) {
if ((focal_candidates$seg_end[i] - focal_candidates$seg_start[i]) <5000000) {
focal_candidates$seg_end[i] <- focal_candidates$seg_start[i] + 5000000
}
}
focal_candidates$mean <- rowMeans(seg_data_samples)
focal_candidates <- focal_candidates[!((abs(focal_candidates$`seg_mpcf$n.probes`)) < focal_min_probes),]
focal_candidates$col <- "amplification"
focal_candid_values <- focal_candidates[,-(1:5)]
focalcount <- c(1:length(focal_candidates$seg_start))
for (i in focalcount) {
focal_candidates$count[i] <- max(0, (sum(focal_candid_values[i,] >= thresh)) )
if (focal_candidates$mean[i] < 0)
{
focal_candidates$count[i] <- focal_candidates$count[i] * -1
focal_candidates$col[i] <- "deletion"
}
}
#broad candidates
broad_candidates <- df_abberation_candidates
broad_candidates$mean <- rowMeans(seg_data_samples)
broad_candidates <- broad_candidates[!((abs(broad_candidates$`seg_mpcf$n.probes`)) < broad_min_probes),]
broad_candid_values <- abs(broad_candidates[,-(1:5)])
broadcount <- c(1:length(broad_candid_values$mean))
broad_candidates$col <- "amplification"
for (i in broadcount) {
broad_candidates$count[i] <- max(0, (sum(broad_candid_values[i,] >= thresh)) )
if (broad_candidates$mean[i] < 0)
{
broad_candidates$count[i] <- broad_candidates$count[i] * -1
broad_candidates$col[i] <- "deletion"
}
}
if (nrow(focal_candidates[(focal_candidates$count!=0),]) == 0) {
candidates <- broad_candidates[(broad_candidates$count!=0),]
} else if (nrow(broad_candidates[(broad_candidates$count!=0),]) == 0) {
candidates <- focal_candidates[(focal_candidates$count!=0),]
} else {
candidates <- rbind(focal_candidates[(focal_candidates$count!=0),], broad_candidates[(broad_candidates$count!=0),])
}
sample_no <- ncol(seg_data_samples)
b <- c(-1, -0.5, 0, 0.5, 1)
y_axis_break <-c(-sample_no,-(sample_no/2) + -(sample_no/4), -(sample_no/2), -(sample_no/4),0, sample_no/4, sample_no/2,(sample_no/2) + (sample_no/4), sample_no)
y_axis_label <- c("100","75", "50","25", "0","25", "50","75", "100" )
cumFreq <- ggplot2::ggplot() +
ggplot2::geom_rect(data = candidates,  aes(xmin = seg_start, xmax = seg_end, ymax = count, ymin = 0 , fill = col))  +
ggplot2::geom_vline(xintercept = genome_chr, colour = "grey") +
ggplot2::geom_hline( yintercept = 0, colour ="darkgrey") +
ggplot2::scale_x_continuous(name = "Chromosome", breaks = axis_break, labels = axis_label, limits = c(0, 2881033286)) +
ggplot2::theme_classic(base_size = 15) +
ggplot2::guides(x = guide_axis(angle = 40)) +
ggplot2::scale_y_continuous(name = "Occurence [%]", breaks = y_axis_break, labels = y_axis_label, limits = c(-sample_no, sample_no)) +
ggplot2::scale_fill_discrete(guide="none") +
ggplot2::scale_fill_manual(values = c("amplification" = colour.amplification,"deletion" = colour.loss), guide="none") +
ggplot2::coord_cartesian(xlim = c(50001, 2881033286), expand = FALSE) +
ggplot2::guides(x = guide_axis(n.dodge = 2))
}
else {
chr_name <- mSetsAnno$anno_targets@genome$chr
chr_size <- mSetsAnno$anno_targets@genome$size
genome_chr <- cumsum(as.numeric(chr_size))
chr_centr <- mSetsAnno$anno_targets@genome$pq
#just for getting pq - lines
addChr <- c(0,genome_chr)
addChr <- addChr[-length(addChr)]
genome_centr <- chr_centr + addChr
#defining threshholds
broad_min_probes <- 300
focal_min_probes <- 2
#x-axis
axis_break <- genome_centr
axis_label <- c(1:22)
b <- c(-1, -0.5, 0, 0.5, 1)
#segment
segstart <- seg_mpcf$start.pos
segend <- seg_mpcf$end.pos
segnames <- as.numeric(seg_mpcf$chrom)
segment_data <- as.data.frame(cbind(segstart, segend, segnames))
colnames(segment_data) <- c("seg_start", "seg_end" , "chr")
#calculate position on genome
seg_start <- c()
seg_end <- c()
foreach(i=1:length(segment_data$chr)) %do%
{
seg_start[i] <- segment_data$seg_start[i] + addChr[segment_data$chr[i]]
seg_end[i] <- segment_data$seg_end[i] + addChr[segment_data$chr[i]]
}
seg_data_samples <- seg_mpcf[,-(which(names(seg_mpcf) %in% c("chrom", "arm", "start.pos", "end.pos", "n.probes")))]
df_seg_val <- as.data.frame(cbind(seg_start, seg_end,  rowMeans(seg_data_samples)))
df_abberation_candidates <- as.data.frame(cbind(seg_start, seg_end, seg_mpcf$n.probes, seg_data_samples))
#focal candidates
focal_candidates <- df_abberation_candidates
#focal_candidates$seg_end <- focal_candidates$seg_end + 10000000
for (i in 1:length(focal_candidates$seg_end)) {
if ((focal_candidates$seg_end[i] - focal_candidates$seg_start[i]) <5000000) {
focal_candidates$seg_end[i] <- focal_candidates$seg_start[i] + 5000000
}
}
focal_candidates$mean <- rowMeans(seg_data_samples)
focal_candidates <- focal_candidates[!((abs(focal_candidates$`seg_mpcf$n.probes`)) < focal_min_probes),]
focal_candidates$col <- "amplification"
focal_candid_values <- focal_candidates[,-(1:5)]
focalcount <- c(1:length(focal_candidates$seg_start))
for (i in focalcount) {
focal_candidates$count[i] <- max(0, (sum(focal_candid_values[i,] >= thresh)) )
if (focal_candidates$mean[i] < 0)
{
focal_candidates$count[i] <- focal_candidates$count[i] * -1
focal_candidates$col[i] <- "deletion"
}
}
#broad candidates
broad_candidates <- df_abberation_candidates
broad_candidates$mean <- rowMeans(seg_data_samples)
broad_candidates <- broad_candidates[!((abs(broad_candidates$`seg_mpcf$n.probes`)) < broad_min_probes),]
broad_candid_values <- abs(broad_candidates[,-(1:5)])
broadcount <- c(1:length(broad_candid_values$mean))
broad_candidates$col <- "amplification"
for (i in broadcount) {
broad_candidates$count[i] <- max(0, (sum(broad_candid_values[i,] >= thresh)) )
if (broad_candidates$mean[i] < 0)
{
broad_candidates$count[i] <- broad_candidates$count[i] * -1
broad_candidates$col[i] <- "deletion"
}
}
if (nrow(focal_candidates[(focal_candidates$count!=0),]) == 0) {
candidates <- broad_candidates[(broad_candidates$count!=0),]
} else if (nrow(broad_candidates[(broad_candidates$count!=0),]) == 0) {
candidates <- focal_candidates[(focal_candidates$count!=0),]
} else {
candidates <- rbind(focal_candidates[(focal_candidates$count!=0),], broad_candidates[(broad_candidates$count!=0),])
}
sample_no <- ncol(seg_data_samples)
b <- c(-1, -0.5, 0, 0.5, 1)
y_axis_break <-c(-sample_no,-(sample_no/2) + -(sample_no/4), -(sample_no/2), -(sample_no/4),0, sample_no/4, sample_no/2,(sample_no/2) + (sample_no/4), sample_no)
y_axis_label <- c("100","75", "50","25", "0","25", "50","75", "100" )
cumFreq <- ggplot2::ggplot() +
ggplot2::geom_rect(data = candidates,  aes(xmin = seg_start, xmax = seg_end, ymax = count, ymin = 0 , fill = col))  +
ggplot2::geom_vline(xintercept = genome_chr, colour = "grey") +
ggplot2::geom_vline(xintercept = genome_centr, linetype="dotted", colour = "grey") +
ggplot2::geom_hline( yintercept = 0, colour ="darkgrey") +
ggplot2::scale_x_continuous(name = "Chromosome", breaks = axis_break, labels = axis_label, limits = c(0, 2881033286)) +
ggplot2::theme_classic(base_size = 15) +
ggplot2::guides(x = guide_axis(angle = 40)) +
ggplot2::scale_y_continuous(name = "Occurence [%]", breaks = y_axis_break, labels = y_axis_label, limits = c(-sample_no, sample_no)) +
ggplot2::scale_fill_discrete(guide="none") +
ggplot2::scale_fill_manual(values = c("amplification" = colour.amplification,"deletion" = colour.loss), guide="none") +
ggplot2::coord_cartesian(xlim = c(50001, 2881033286), expand = FALSE) +
ggplot2::guides(x = guide_axis(n.dodge = 2))
}
return(cumFreq)
}
library(ggplot2)
setwd("D:/CumulativeCopyNumberPaper/LUSC/capper_results")
files_multiseg_v1 <- list.files(path="D:/CumulativeCopyNumberPaper/LUSC/capper_results/", pattern="multiseg_v1.csv", all.files=FALSE,full.names=FALSE)
files_multiseg_v2 <- list.files(path="D:/CumulativeCopyNumberPaper/LUSC/capper_results/", pattern="multiseg_v2.csv", all.files=FALSE,full.names=FALSE)
files_singleseg_v1 <- list.files(path="D:/CumulativeCopyNumberPaper/LUSC/capper_results/", pattern="singleseg_v1.csv", all.files=FALSE,full.names=FALSE)
files_singleseg_v2 <- list.files(path="D:/CumulativeCopyNumberPaper/LUSC/capper_results/", pattern="singleseg_v2.csv", all.files=FALSE,full.names=FALSE)
graphdir <- "D:/CumulativeCopyNumberPaper/LUSC/capper_results/graphs/"
filedir <- "D:/CumulativeCopyNumberPaper/LUSC/capper_results/"
for(i in 1:length(files_singleseg_v1)){
x <- read.csv(paste(filedir,files_singleseg_v1[i], sep = ""), sep = " ")
x2 <- x
x2$segmean_OLD <- x2$segmean
foreach::foreach(j = 1:nrow(x2)) %do% {
if (x2$segmean_OLD[j] > (x2$noise[j] * thresh)) {
x2$segmean[j] <- 1
} else if (x2$segmean_OLD[j] < -(x2$noise[j] * thresh)) {
x2$segmean[j] <- -1
} else {
x2$segmean[j] <- 0
}
}
p1 <- singleFrequencyPlot(mSetsAnno, x2, colour.amplification = colour.amplification, colour.loss = colour.loss, thresh = thresh, array_type = "450k")
p2 <- overlayPlot(mSetsAnno, x, colour.amplification, colour.loss , array_type)
fileFreq = paste(tools::file_path_sans_ext(basename(files_singleseg_v1[i])), "_Freq.png", sep = "")
filepathFreq <- paste(graphdir,fileFreq, sep = "")
ggsave(filepathFreq, plot = p1, width = 20, height = 15, units = "cm")
fileOverlay = paste(tools::file_path_sans_ext(basename(files_singleseg_v1[i])), "_Overlay.png", sep = "")
filepathOverlay <- paste(graphdir,fileOverlay, sep = "")
ggsave(filepathOverlay, plot = p2, width = 20, height = 15, units = "cm")
}
for(i in 1:length(files_singleseg_v2)){
x <- read.csv(paste(filedir,files_singleseg_v2[i], sep = ""), sep = " ")
p1 <- singleFrequencyPlot(mSetsAnno, x, colour.amplification = colour.amplification, colour.loss = colour.loss, thresh = thresh, array_type = "450k")
p2 <- overlayPlot(mSetsAnno, x, colour.amplification, colour.loss , array_type)
fileFreq = paste(tools::file_path_sans_ext(basename(files_singleseg_v2[i])), "_Freq.png", sep = "")
filepathFreq <- paste(graphdir,fileFreq, sep = "")
ggsave(filepathFreq, plot = p1, width = 20, height = 15, units = "cm")
fileOverlay = paste(tools::file_path_sans_ext(basename(files_singleseg_v2[i])), "_Overlay.png", sep = "")
filepathOverlay <- paste(graphdir,fileOverlay, sep = "")
ggsave(filepathOverlay, plot = p2, width = 20, height = 15, units = "cm")
}
for(i in 1:length(files_multiseg_v1)){
x <- read.csv(paste(filedir,files_multiseg_v1[i], sep = ""), sep = " ")
p1 <- cumFreq(mSetsAnno, x, colour.amplification = colour.amplification, colour.loss = colour.loss, thresh = thresh, array_type = "450k")
p2 <- CCNV(mSetsAnno, seg_mpcf, target_ratios, array_type, colour.amplification, colour.loss, detail.regions = NULL, array_type)
fileFreq = paste(tools::file_path_sans_ext(basename(files_multiseg_v1[i])), "_Freq.png", sep = "")
filepathFreq <- paste(graphdir,fileFreq, sep = "")
ggsave(filepathFreq, plot = p1, width = 20, height = 15, units = "cm")
fileOverlay = paste(tools::file_path_sans_ext(basename(files_multiseg_v1[i])), "_Overlay.png", sep = "")
filepathOverlay <- paste(graphdir,fileOverlay, sep = "")
ggsave(filepathOverlay, plot = p2, width = 20, height = 15, units = "cm")
}
setwd("/Volumes/PhD/CCNV/")
devtools::load_all()
#for Mac
target_files <- read.csv("/Volumes/PhD/Capper_Methylation/capper_et_al_clinical_2.csv", header=TRUE, sep=";")
graphdir <- "/Volumes/PhD/CumulativeCopyNumberPaper/woutError/"
CapperTypes <- unique(target_files$methylation_class)
subtype <- target_files[which(target_files$methylation_class == "atrt_myc"),]
#mg <- cumul.CNV(subtype, segmentationMode = "multi", conumee.version = 2, output = "data")
cumul.CNV(subtype, conumee.version = 1)
#mg <- cumul.CNV(subtype, segmentationMode = "multi", conumee.version = 2, output = "data")
am <- cumul.CNV(subtype, conumee.version = 1, output = "data")
View(am)
#graphdir <- "/Volumes/PhD/CumulativeCopyNumberPaper/woutError/"
graphdir <- "/Volumes/PhD/CumulativeCopyNumberPaper/ATRT-MYC_BSP/"
fileFreq = paste("atrt_myc", "_v1_CCNV_new.png", sep = "")
filepathFreq <- paste(graphdir,fileFreq, sep = "")
ggsave(filepathFreq, plot = am$multiSeg[[1]], width = 20, height = 10, units = "cm")
ggsave(filepathFreq, plot = am$multiSeg[[1]], width = 18, height = 10, units = "cm")
fileOverlay = paste("atrt_myc", "_v1_Freq_new.png", sep = "")
filepathOverlay <- paste(graphdir,fileOverlay, sep = "")
ggsave(filepathFreq, plot = am$multiSeg[[2]], width = 18, height = 10, units = "cm")
fileFreq = paste("atrt_myc", "_v1_overlay_new.png", sep = "")
filepathFreq <- paste(graphdir,fileFreq, sep = "")
ggsave(filepathFreq, plot = am$singleSeg[[1]], width = 18, height = 10, units = "cm")
#ggsave(filepathFreq, plot = mg[[1]], width = 20, height = 10, units = "cm")
fileOverlay = paste("atrt_myc", "_v1_singFreq_new.png", sep = "")
filepathOverlay <- paste(graphdir,fileOverlay, sep = "")
ggsave(filepathFreq, plot = am$singleSeg[[2]], width = 18, height = 10, units = "cm")
#mg <- cumul.CNV(subtype, segmentationMode = "multi", conumee.version = 2, output = "data")
am <- cumul.CNV(subtype, conumee.version = 2, output = "data")
ggsave(filepathFreq, plot = am$singleSeg[[1]], width = 18, height = 10, units = "cm")
#ggsave(filepathFreq, plot = mg[[1]], width = 20, height = 10, units = "cm")
fileOverlay = paste("atrt_myc", "_v1_singFreq_new.png", sep = "")
filepathOverlay <- paste(graphdir,fileOverlay, sep = "")
ggsave(filepathFreq, plot = am$singleSeg[[2]], width = 18, height = 10, units = "cm")
ggsave(filepathFreq, plot = am$singleSeg[[2]], width = 18, height = 10, units = "cm")
ggsave(filepathFreq, plot = am$singleSeg[[2]], width = 20, height = 10, units = "cm")
ggsave(filepathFreq, plot = am$singleSeg[[2]], width = 18, height = 10, units = "cm")
fileFreq = paste("atrt_myc", "_v1_CCNV_new.png", sep = "")
filepathFreq <- paste(graphdir,fileFreq, sep = "")
ggsave(filepathFreq, plot = am$multiSeg[[1]], width = 18, height = 10, units = "cm")
fileOverlay = paste("atrt_myc", "_v1_Freq_new.png", sep = "")
filepathOverlay <- paste(graphdir,fileOverlay, sep = "")
ggsave(filepathFreq, plot = am$multiSeg[[2]], width = 18, height = 10, units = "cm")
ileFreq = paste("atrt_myc", "_v1_CCNV_new.png", sep = "")
filepathFreq <- paste(graphdir,fileFreq, sep = "")
ggsave(filepathFreq, plot = am$multiSeg[[1]], width = 18, height = 10, units = "cm")
fileOverlay = paste("atrt_myc", "_v1_Freq_new.png", sep = "")
filepathOverlay <- paste(graphdir,fileOverlay, sep = "")
ggsave(filepathOverlay, plot = am$multiSeg[[2]], width = 18, height = 10, units = "cm")
fileFreq = paste("atrt_myc", "_v1_overlay_new.png", sep = "")
filepathFreq <- paste(graphdir,fileFreq, sep = "")
ggsave(filepathFreq, plot = am$singleSeg[[1]], width = 18, height = 10, units = "cm")
fileOverlay = paste("atrt_myc", "_v1_singFreq_new.png", sep = "")
filepathOverlay <- paste(graphdir,fileOverlay, sep = "")
ggsave(filepathOverlay, plot = am$singleSeg[[2]], width = 18, height = 10, units = "cm")
#mg <- cumul.CNV(subtype, segmentationMode = "multi", conumee.version = 2, output = "data")
am <- cumul.CNV(subtype, conumee.version = 2, output = "data")
fileFreq = paste("atrt_myc", "_v2_CCNV_new.png", sep = "")
filepathFreq <- paste(graphdir,fileFreq, sep = "")
ggsave(filepathFreq, plot = am$multiSeg[[1]], width = 18, height = 10, units = "cm")
#ggsave(filepathFreq, plot = mg[[1]], width = 20, height = 10, units = "cm")
fileOverlay = paste("atrt_myc", "_v2_Freq_new.png", sep = "")
filepathOverlay <- paste(graphdir,fileOverlay, sep = "")
ggsave(filepathOverlay, plot = am$multiSeg[[2]], width = 18, height = 10, units = "cm")
fileFreq = paste("atrt_myc", "_v2_overlay_new.png", sep = "")
filepathFreq <- paste(graphdir,fileFreq, sep = "")
ggsave(filepathFreq, plot = am$singleSeg[[1]], width = 18, height = 10, units = "cm")
#ggsave(filepathFreq, plot = mg[[1]], width = 20, height = 10, units = "cm")
fileOverlay = paste("atrt_myc", "_v2_singFreq_new.png", sep = "")
filepathOverlay <- paste(graphdir,fileOverlay, sep = "")
ggsave(filepathOverlay, plot = am$singleSeg[[2]], width = 18, height = 10, units = "cm")
knitr::opts_chunk$set(echo = TRUE)
#for Mac
target_files <- read.csv("/Volumes/PhD/Ependymoma/Ependymoma_methylation_mainCohort/sample_info_02_08_2022_850_Mac.csv", header=TRUE, sep=";")
#
g_files <- paste0(target_files$Basename, "_Grn.idat")
r_files <- paste0(target_files$Basename,"_Red.idat" )
# test if every file is an idat file
test_grn <- sapply(g_files, readChar, nchars = 4)
test_red <- sapply(r_files, readChar, nchars = 4)
#This will give out file names if they are not IDAT and character 0 if all files are IDAT
test_grn[test_grn != "IDAT"]
test_red[test_red != "IDAT"]
devtools::load_all()
setwd("/Users/antoniagocke/Documents/GitHub/CCNV")
devtools::load_all()
#remove duplicates
while (anyDuplicated(target_files$Basename) != "0") {
target_files <- target_files[-anyDuplicated(target_files$Basename),]
}
PFB2_5 <- target_files[which(target_files$Classifier_new_version_condensed == "EPN_PFB_1_to_5"),]
PFB2_5 <- PFB2_5[-which(PFB2_5$Classifier_new_version == "EPN_PFB_1"),]
cumul.CNV(PFB2_5, segmentationMode = "multi")
pfb <- cumul.CNV(PFB2_5, segmentationMode = "multi", out = "data")
knitr::opts_chunk$set(echo = TRUE)
#multi_data <- read.csv("D:/CumulativeCopyNumberPaper/LUSC/capper_results/atrt_myc;multiseg_v1.csv", sep = " ")
#single_data <- read.csv("D:/CumulativeCopyNumberPaper/LUSC/capper_results/atrt_myc;singleseg_v1.csv", sep = " ")
segmentation_data <- read.csv("/Volumes/PhD/CumulativeCopyNumberPaper/LUSC/capper_results/atrt_myc;multiseg_v1.csv", sep = " ")
#multi_data <- read.csv("D:/CumulativeCopyNumberPaper/LUSC/capper_results/atrt_myc;multiseg_v1.csv", sep = " ")
#single_data <- read.csv("D:/CumulativeCopyNumberPaper/LUSC/capper_results/atrt_myc;singleseg_v1.csv", sep = " ")
segmentation_data <- read.csv("/Volumes/PhD/CumulativeCopyNumberPaper/HSU/capper_results/atrt_myc;multiseg_v1.csv", sep = " ")
segmentation_data$n.bp <- segmentation_data$end.pos - segmentation_data$start.pos
segmentation_data_filtered <- segmentation_data[,-which(names(segmentation_data) %in% c("start.pos", "end.pos", "n.probes"))]
sample_names <- names(segmentation_data_filtered)
sample_names <- sample_names[-1]
chromosomal_weights <- segmentation_data_filtered %>% group_by(chrom) %>%  mutate(weight = n.bp / sum(n.bp),)
chromosomal_average_multi <- chromosomal_weights %>% group_by(chrom) %>% summarise(across(sample_names, ~weighted.mean(., w = weight)))
chromosomal_average_multi <- chromosomal_average_multi[,-1 ,drop=FALSE]
View(chromosomal_average_multi)
View(chromosomal_weights)
View(chromosomal_average_multi)
chromosomal_weights <- segmentation_data_filtered %>% group_by(chrom) %>%  mutate(weight = n.bp / sum(n.bp),)
chromosomal_average_multi <- chromosomal_weights %>% group_by(chrom) %>% summarise(across(sample_names, ~weighted.mean(., w = weight)))
chromosomal_average_multi <- chromosomal_average_multi[,which(names(chromosomal_average_multi) %in% c("n.bp", "chrom")) ,drop=FALSE]
View(chromosomal_weights)
View(chromosomal_average_multi)
chromosomal_weights <- segmentation_data_filtered %>% group_by(chrom) %>%  mutate(weight = n.bp / sum(n.bp),)
chromosomal_average_multi <- chromosomal_weights %>% group_by(chrom) %>% summarise(across(sample_names, ~weighted.mean(., w = weight)))
chromosomal_average_multi <- chromosomal_average_multi[,-which(names(chromosomal_average_multi) %in% c("n.bp", "chrom")) ,drop=FALSE]
View(chromosomal_weights)
View(chromosomal_average_multi)
chromosomal_average_multi[chromosomal_average_multi > 0 && chromosomal_average_multi <= thresh ] <- 1
replace(chromosomal_average_multi, chromosomal_average_multi <= -thresh, -1)
thresh = 0.2
chromosomal_average_multi[chromosomal_average_multi > 0 && chromosomal_average_multi <= thresh ] <- 1
replace(chromosomal_average_multi, chromosomal_average_multi <= -thresh, -1)
chromosomal_average_multi <- replace(chromosomal_average_multi, chromosomal_average_multi <= -thresh, -1)
chromosomal_average_multi <-replace(chromosomal_average_multi, thresh <= chromosomal_average_multi, 1)
chromosomal_average_multi <-replace(chromosomal_average_multi, chromosomal_average_multi != 1 && chromosomal_average_multi != -1 , 0)
View(chromosomal_average_multi)
chromosomal_average_multi[chromosomal_average_multi > 0 & chromosomal_average_multi <= thresh ] <- 1
View(chromosomal_average_multi)
chromosomal_average_multi[ chromosomal_average_multi <= -thresh ] <- -1
chromosomal_average_multi[chromosomal_average_multi != 1 & chromosomal_average_multi != -1 ] <- 0
View(chromosomal_average_multi)
test <- hclust(chromosomal_average_multi)
?hclust
View(chromosomal_average_multi)
test <- hclust(dist(chromosomal_average_multi))
View(test)
print(test)
View(test)
plot(test)
print(test)
View(test)
euclideanDist <- hclust(dist(chromosomal_average_multi))
ordereuclideanDist <- euclideanDist$order
chromosomal_average_multi <- chromosomal_average_multi[,ordereuclideanDist]
chromosomal_average_multi <- chromosomal_weights %>% group_by(chrom) %>% summarise(across(sample_names, ~weighted.mean(., w = weight)))
chromosomal_average_multi <- chromosomal_average_multi[,-which(names(chromosomal_average_multi) %in% c("n.bp", "chrom")) ,drop=FALSE]
chromosomal_average_multi[chromosomal_average_multi > 0 & chromosomal_average_multi <= thresh ] <- 1
chromosomal_average_multi[chromosomal_average_multi <= -thresh ] <- -1
chromosomal_average_multi[chromosomal_average_multi != 1 & chromosomal_average_multi != -1 ] <- 0
euclideanDist <- hclust(dist(t(chromosomal_average_multi)))
ordereuclideanDist <- euclideanDist$order
chromosomal_average_multi <- chromosomal_average_multi[ordereuclideanDist,]
chromosomal_average_multi[chromosomal_average_multi > 0 & chromosomal_average_multi <= thresh ] <- 1
chromosomal_average_multi[chromosomal_average_multi <= -thresh ] <- -1
chromosomal_average_multi[chromosomal_average_multi != 1 & chromosomal_average_multi != -1 ] <- 0
euclideanDist <- hclust(dist(t(chromosomal_average_multi)))
ordereuclideanDist <- euclideanDist$order
chromosomal_average_multi <- chromosomal_average_multi[,ordereuclideanDist]
View(chromosomal_average_multi)
chromosomal_average_multi <- chromosomal_weights %>% group_by(chrom) %>% summarise(across(sample_names, ~weighted.mean(., w = weight)))
chromosomal_average_multi <- chromosomal_average_multi[,-which(names(chromosomal_average_multi) %in% c("n.bp", "chrom")) ,drop=FALSE]
chromosomal_average_multi[chromosomal_average_multi > 0 & chromosomal_average_multi <= thresh ] <- 1
chromosomal_average_multi[chromosomal_average_multi <= -thresh ] <- -1
chromosomal_average_multi[chromosomal_average_multi != 1 & chromosomal_average_multi != -1 ] <- 0
euclideanDist <- hclust(dist(t(chromosomal_average_multi)))
ordereuclideanDist <- euclideanDist$order
chromosomal_average_multi <- chromosomal_average_multi[,ordereuclideanDist]
View(chromosomal_average_multi)
output <- cbind(chromosome = c(1:(length(chromosomal_average_multi[,1]))), chromosomal_average_multi)
View(output)
output <- cbind(chromosome = c(1:length(chromosomal_average_multi[,1])), chromosomal_average_multi)
View(chromosomal_average_multi)
View(output)
chromosomal_average_multi <- chromosomal_average_multi[,ordereuclideanDist]
output <- cbind(chromosome = c(1:length(chromosomal_average_multi[,1])), chromosomal_average_multi)
View(output)
length(chromosomal_average_multi[,1])
length(chromosomal_average_multi[1])
length(chromosomal_average_multi[1,])
length(chromosomal_average_multi[,1])
length(t(chromosomal_average_multi)[1,])
output <- cbind(chromosome = c(1:length(t(chromosomal_average_multi)[1,])), chromosomal_average_multi)
View(output)
chromosomal_average_multi <- chromosomal_weights %>% group_by(chrom) %>% summarise(across(sample_names, ~weighted.mean(., w = weight)))
chromosomal_average_multi <- chromosomal_average_multi[,-which(names(chromosomal_average_multi) %in% c("n.bp", "chrom")) ,drop=FALSE]
chromosomal_average_multi[chromosomal_average_multi > 0 & chromosomal_average_multi <= thresh ] <- 1
chromosomal_average_multi[chromosomal_average_multi <= -thresh ] <- -1
chromosomal_average_multi[chromosomal_average_multi != 1 & chromosomal_average_multi != -1 ] <- 0
View(chromosomal_average_multi)
segmentation_data_filtered <- segmentation_data[,-which(names(segmentation_data) %in% c("chrom", "start.pos", "end.pos", "n.probes"))]
segment_average_multi <- segmentation_data_filtered
segment_average_multi[segment_average_multi > 0 & segment_average_multi <= thresh ] <- 1
segment_average_multi[segment_average_multi <= -thresh ] <- -1
segment_average_multi[segment_average_multi != 1 & segment_average_multi != -1 ] <- 0
View(segment_average_multi)
euclideanDist <- hclust(dist(t(segment_average_multi)))
ordereuclideanDist <- euclideanDist$order
segment_average_multi <- segment_average_multi[,ordereuclideanDist]
output <- cbind(chromosome = c(segmentation_data[,c(1:3)], chromosomal_average_multi)
output <- cbind(chromosome = c(segmentation_data[,c(1:3)], chromosomal_average_multi))
output <- cbind(chromosome = c(segmentation_data[,c(1:3)], chromosomal_average_multi))
View(output)
output <- as.data.frame(cbind(chromosome = c(segmentation_data[,c(1:3)], chromosomal_average_multi)))
View(output)
segmentation_data_filtered <- segmentation_data[,-which(names(segmentation_data) %in% c("chrom", "start.pos", "end.pos", "n.probes"))]
segment_average_multi <- segmentation_data_filtered
segment_average_multi[segment_average_multi > 0 & segment_average_multi <= thresh ] <- 1
segment_average_multi[segment_average_multi <= -thresh ] <- -1
segment_average_multi[segment_average_multi != 1 & segment_average_multi != -1 ] <- 0
euclideanDist <- hclust(dist(t(segment_average_multi)))
ordereuclideanDist <- euclideanDist$order
segment_average_multi <- segment_average_multi[,ordereuclideanDist]
output <- as.data.frame(cbind(chromosome = c(segmentation_data[,c(1:3)], chromosomal_average_multi)))
View(output)
segmentation_data_filtered <- segmentation_data[,-which(names(segmentation_data) %in% c("chrom", "start.pos", "end.pos", "n.probes"))]
segment_average_multi <- segmentation_data_filtered
segment_average_multi[segment_average_multi > 0 & segment_average_multi <= thresh ] <- 1
segment_average_multi[segment_average_multi <= -thresh ] <- -1
segment_average_multi[segment_average_multi != 1 & segment_average_multi != -1 ] <- 0
euclideanDist <- hclust(dist(t(segment_average_multi)))
ordereuclideanDist <- euclideanDist$order
segment_average_multi <- segment_average_multi[,ordereuclideanDist]
pos <- segmentation_data[,c(1:3)]
View(pos)
output <- as.data.frame(cbind(pos, chromosomal_average_multi)))
output <- as.data.frame(cbind(pos, chromosomal_average_multi))
output <- as.data.frame(cbind(pos, segment_average_multi))
View(output)
output <- as.data.frame(cbind(segmentation_data[,c(1:3)], segment_average_multi))
View(output)
segmentation_data <- read.csv("/Volumes/PhD/CumulativeCopyNumberPaper/HSU/capper_results/atrt_myc;singleseg_v1.csv", sep = " ")
segmentation_data$n.bp <- segmentation_data$end - segmentation_data$start
single_data_filtered <- segmentation_data[,-which(names(segmentation_data) %in% c("start", "end", "noise"))]
single_data_weights <- single_data_filtered %>% group_by(sample) %>% group_by(chromosome, add = TRUE) %>% mutate(weight = n.bp / sum(n.bp),)
?group_by
single_data_weights <- single_data_filtered %>% group_by(sample) %>% group_by(chromosome, .add = TRUE) %>% mutate(weight = n.bp / sum(n.bp),)
chromosomal_average_single <- single_data_weights %>% group_by(sample, chromosome) %>% summarise(segmean_weighted_mean = weighted.mean(segmean, weight, na.rm = TRUE))
chromosomal_wide <- chromosomal_average_single %>% tidyverse::pivot_wider(names_from = sample, values_from = segmean_weighted_mean)
chromosomal_wide <- chromosomal_average_single %>% tidyverse::pivot_wider(names_from = sample, values_from = segmean_weighted_mean)
require(tidyverse)
chromosomal_wide <- chromosomal_average_single %>% tidyverse::pivot_wider(names_from = sample, values_from = segmean_weighted_mean)
chromosomal_wide <- chromosomal_average_single %>% pivot_wider(names_from = sample, values_from = segmean_weighted_mean)
View(chromosomal_wide)
chromosomal_average_single <- chromosomal_wide[,-1]
chromosomal_average_single[chromosomal_average_single > 0 & chromosomal_average_single <= thresh ] <- 1
chromosomal_average_single[chromosomal_average_single <= -thresh ] <- -1
chromosomal_average_single[chromosomal_average_single != 1 & chromosomal_average_single != -1 ] <- 0
euclideanDist <- hclust(dist(t(chromosomal_average_single)))
ordereuclideanDist <- euclideanDist$order
chromosomal_average_single <- chromosomal_average_single[,ordereuclideanDist]
output <- cbind(chromosome = c(1:length(t(chromosomal_average_single)[1,])), chromosomal_average_single)
View(output)
devtools::load_all()
#multi_data <- read.csv("D:/CumulativeCopyNumberPaper/LUSC/capper_results/atrt_myc;multiseg_v1.csv", sep = " ")
#single_data <- read.csv("D:/CumulativeCopyNumberPaper/LUSC/capper_results/atrt_myc;singleseg_v1.csv", sep = " ")
multi_data <- read.csv("/Volumes/PhD/CumulativeCopyNumberPaper/HSU/capper_results/atrt_myc;multiseg_v1.csv", sep = " ")
single_data <- read.csv("/Volumes/PhD/CumulativeCopyNumberPaper/HSU/capper_results/atrt_myc;singleseg_v1.csv", sep = " ")
View(single_data)
test_multi <- get.chromAberrations(multi_data)
devtools::load_all()
test_multi <- get.chromAberrations(multi_data)
test_multi <- get.chromAberrations(multi_data)
test_single <- get.chromAberrations(single_data)
View(test_multi)
View(test_single)
View(test_multi)
